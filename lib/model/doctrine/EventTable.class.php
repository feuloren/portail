<?php

/**
 * EventTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EventTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object EventTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Event');
    }

    /**
     *
     * Fetch the list of all events sorted by date.
     *
     * @param int $asso
     */
    public function getEventsList($asso = null)
    {
        $q = $this->createQuery('a')
            ->select('a.*, as.id, p.couleur')
            ->leftJoin('a.Asso as')
            ->leftJoin('as.Pole p')
            ->addOrderBy('a.created_at DESC');

        if (!is_null($asso))
        {
            $q = $q->where("a.asso_id = ?", $asso->getPrimaryKey())
                ->leftJoin('a.GuestAsso guest')
                ->orWhere("guest.id = ?", $asso->getPrimaryKey());
            if ($asso->getLogin() == 'picasso')
                $q = $q->orWhere('a.type_id = ?', 2);
        }

        return $q;
    }

    /**
     *
     * Fetch the list of all events in future.
     *
     */
    public function getFutureEventsList($max = 0, $asso = null)
    {
        $q = $this->createQuery('a')
            ->addOrderBy('a.start_date ASC');
        $q = $q->where("a.end_date > NOW()");
        if (!is_null($asso))
        {
            $q = $q->andWhere("a.asso_id = ?", $asso->getPrimaryKey())
                ->leftJoin('a.GuestAsso guest')
                ->orWhere("guest.id = ?", $asso->getPrimaryKey());

            if ($asso->getLogin() == 'picasso') {
                $q = $q->orWhere('a.type_id = ?', 2);
            }
        }

        if ($max > 0) {
            $q->limit($max);
        }

        return $q;
    }

    public function getLastEvents($count = 4)
    {
        $q = $this->getEventsList()
            ->limit($count);
        return $q;
    }

    public function getEventsFollowed($user_id)
    {
        $q = $this->createQuery('ev')
            ->select('as.name, ev.*')
            ->where('ev.asso_id = as.id')
            ->orWhere("guest.id = as.id")
            ->andWhere('ab.user_id = ?', $user_id)
            ->leftJoin('ev.Asso as')
            ->leftJoin('as.Abonnement ab')
            ->leftJoin('ev.GuestAsso guest')
            ->orderBy('ev.updated_at desc')
            ->limit(3);
        return $q;
    }

    public function getEventsForWeekmail() {
        $q = $this->createQuery('e')
            ->select('e.*, as.name')
            ->leftJoin('e.Asso as')
            ->where('e.is_weekmail = ?', true);
        return $q;
    }

    /** Method to use the zend framework for search
     * Give the response of a search query
     * * @param unknown_type $query
     */
    public function getForLuceneQuery($query)
    {
        $hits = self::getLuceneIndex()->find($query);

        $pks = array();
        foreach ($hits as $hit)
        {
            $pks[] = $hit->pk;
        }

        if (empty($pks))
        {
            return array();
        }

        $q = $this->createQuery('a')
            ->whereIn('a.id', $pks)
            ->limit(20);

        return $q->execute();
    }

    /** Method to use the zend framework for search
     * Get or create the index file
     */
    static public function getLuceneIndex()
    {
        ProjectConfiguration::registerZend();

        if (file_exists($index = self::getLuceneIndexFile()))
        {
            return Zend_Search_Lucene::open($index);
        } else
        {
            return Zend_Search_Lucene::create($index);
        }
    }

    /** Method to use the zend framework for search
     * Give the index file if exists
     */
    static public function getLuceneIndexFile()
    {
        return sfConfig::get('sf_data_dir') . '/event.' . sfConfig::get('sf_environment') . '.index';
    }
}
